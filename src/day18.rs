/*
  Day 18: Operation Order

  The puzzle input consists of multiplication, addition, and parenthesis. However, order of operations has changed.

  Part 1
  Multiplication and addition have the same precedence. Parenthesis resolve first.
  Ex)
    1 + (2 * 3) + (4 * (5 + 6))
      1 +    6  + (4 * (5 + 6))
          7     + (4 * (5 + 6))
          7     + (4 *   11   )
          7     +     44
                51
  Evaluate each line in the puzzle input. What is the sum of the resulting values?

  Part 2
  Now, addition is evaluated before multiplication
  Examples:
    2 * 3 + (4 * 5) becomes 46.
    5 + (8 * 3 + 9 + 3 * 4 * 3) becomes 1445.
  Evaluate each line in the puzzle input. What is the sum of the resulting values?
*/

use regex::Regex;

pub fn sum_all_expressions(expressions: &Vec<Vec<String>>) -> i64 {
  return expressions.iter()
    .map(|exp| evaluate_expression(&exp))
    .sum();
}

pub fn sum_all_plus_order(expressions: &Vec<Vec<String>>) -> i64 {
  return expressions.iter()
    .map(|exp| evaluate_expression_plus_order(&exp))
    .sum();
}

fn evaluate_expression(expression: &Vec<String>) -> i64 {
  let mut total = 0;
  let mut operator = "";
  let mut iter = expression.iter();
  let mut c = iter.next();
  while c != None {
    let value = c.unwrap();
    if value == "(" {
      let mut sub_expression = Vec::new();
      let mut open_parens = 1;
      let mut close_parens = 0;
      let mut token = iter.next().unwrap();
      while open_parens != close_parens {
        if token == "(" {
          open_parens += 1;
        } else if token == ")" {
          close_parens += 1;
        }
        
        if open_parens != close_parens {
          sub_expression.push(token.to_string());
          token = iter.next().unwrap();
        }
      }
      let rhs = evaluate_expression(&sub_expression);
      if operator == "" {
        total = rhs;
      } else {
        total = do_operation(total, operator, rhs);
      }
    } else if value == "*" || value == "+" {
      operator = value;
    } else if operator == "" {
      total = value.parse().unwrap();
    } else {
      let rhs: i64 = value.parse().unwrap();
      total = do_operation(total, operator, rhs);
    }
    c = iter.next();
  }

  return total;
}

fn evaluate_expression_plus_order(expression: &Vec<String>) -> i64 {
  let mut no_paren_expression = Vec::new();
  let mut iter = expression.iter();
  let mut c = iter.next();
  while c != None {
    let value = c.unwrap();
    if value == "(" {
      let mut sub_expression = Vec::new();
      let mut open_parens = 1;
      let mut close_parens = 0;
      let mut token = iter.next().unwrap();
      while open_parens != close_parens {
        if token == "(" {
          open_parens += 1;
        } else if token == ")" {
          close_parens += 1;
        }
        
        if open_parens != close_parens {
          sub_expression.push(token.to_string());
          token = iter.next().unwrap();
        }
      }
      let evaled_paren_expression = evaluate_expression_plus_order(&sub_expression).to_string();
      no_paren_expression.push(evaled_paren_expression);
    } else {
      no_paren_expression.push(value.to_string());
    }
    c = iter.next();
  }

  while no_paren_expression.iter().any(|val| val == "+") {
    let plus_position = no_paren_expression.iter().position(|val| val == "+").unwrap();
    let lhs = no_paren_expression[plus_position - 1].parse().unwrap();
    let rhs = no_paren_expression[plus_position + 1].parse().unwrap();
    let add = do_operation(lhs, "+", rhs);
    no_paren_expression[plus_position - 1] = add.to_string();
    no_paren_expression.remove(plus_position);
    no_paren_expression.remove(plus_position);
  }

  return no_paren_expression.iter()
    .filter(|&val| val != "*")
    .map(|val| val.parse::<i64>().unwrap())
    .product();
}

fn do_operation(lhs: i64, operator: &str, rhs: i64) -> i64 {
  if operator == "+" {
    return lhs + rhs;
  } else if operator == "*" {
    return lhs * rhs;
  } else {
    panic!("Unknown operator {} {} {}", lhs, operator, rhs);
  }
}

pub fn parse_expression(input: &str) -> Vec<String> {
  let open_paren = Regex::new(r"\(").unwrap();
  let close_paren = Regex::new(r"\)").unwrap();
  let exp = open_paren.replace_all(input, "( ");
  let exp2 = close_paren.replace_all(&exp, " )").into_owned();
  return exp2.split_whitespace().map(|s| s.to_string()).collect();
}

pub fn read_expressions() -> Vec<Vec<String>> {
  let input = "2 + (2 + 6 * (4 * 5 * 8 * 7) + 3) * (9 + (4 * 3 * 7 * 9)) * 7
    7 * ((9 + 3 + 2 * 8 + 8 + 6) * 5 * 7 * 4 * 9 * 4) + (2 + 9 * (7 * 8 * 2 + 9 + 7) + 8 + (4 + 9 * 7) * 3) * 4 + 9 * (4 * 8 * 4)
    9 * 2 + (9 * 7 * 4 + 4 * 6 + (8 + 9 + 3 * 3))
    (2 * (2 + 4 * 7 + 8) * 5 * 7) * 6 + 4 + 4
    9 + 7 * (2 * (3 * 3 + 9 + 8 * 4) + 8 * 9) * 6 * 9 + 8
    7 + (9 + 4 * 5 * 4 + 6 + (8 + 7 + 4 + 7 + 6)) + (3 * 7 * 8 * 2) * 3 * 3 + 5
    7 * 2 + (2 + 5 + 4 * 5) + (4 * 2 * 5 * (5 * 2 * 6 * 9)) * (7 + 6 + 5 + (4 * 2 + 4 + 6 + 6) + 9 + 2)
    ((4 * 4 + 4) + 3 * 2) * 3 * 8 + 7 + 8 + 6
    (4 + 8 + 5 + 3 + (8 + 8 + 4)) * 5 + 5 * (9 * 8 * 2 + (4 * 3)) + 7
    2 * 7 + 8 * 3 + 8
    8 + 7 * ((4 + 4 + 3 * 8 + 3) * 7 * 6 * 6 * 2)
    4 + 2 + (6 * 4) * 5 + 7 * 9
    8 * 6 + 9 * (8 + 4) + 3
    9 + 2 + 2 + ((4 + 4 * 8 + 6 * 6 * 5) * 8 * 2) * 9 * (6 + 3)
    (2 * 7 + 7 + 9 + 3) * (3 + 8 + 7) + 4 * (9 + 9 + (2 + 2 + 3 * 5 * 5 * 3) * (6 * 2) + 9) * 3
    (2 + 4 * 6 * (5 * 8) * 2) * 3 * 3 + 3 * 3
    (5 + 4 * (3 * 2 * 9 * 4 + 9) * 4) * 5
    2 * (4 + (7 * 9 * 9) + 8 * (8 * 4 + 5 + 2) + 4) + 7 + (5 * 5 + 7 + (4 * 8 * 5 * 2 * 2)) * (4 + 5 + 4 + 8 + 6) + 4
    4 * 2 * ((6 * 2 * 5) * 8 * (5 + 8 * 7))
    9 * (7 + 2 + 7 * 3) * 6 * 3
    6 * 6 * 8 + 6
    2 * 2 + 8 + 3 * (6 + 3 + (9 + 2 * 3 * 5 * 4 * 2) * 7)
    ((8 * 9) + 6 + (2 + 7 * 9 + 8 + 3 * 8) * 8) + 6 + 6 * (9 * (5 + 7 + 3 + 8 + 8 * 3) + (2 + 4 + 2 + 5) + (2 * 8 * 8 * 9 * 4 * 4) + 3 * 2) + (5 * 7 + 3)
    4 + 6 * 7 * 7 * (9 * (2 + 8) + 3 + 4 * 2 * (2 * 8 + 9 * 9))
    (5 + 3) * (5 * (4 * 4) + (7 * 7 + 7 * 5 + 6) + 3 * (8 + 7 + 4 * 8 + 8 + 5) + 5) * 8 * 9
    (7 * 8 * 3 * 4 + 7 * 3) + 9 * 2 + 7 * (8 * 2 + 8 * 2)
    7 + 5 + 4 + (9 + 7 * 9 * 4) + 2 * 6
    ((3 * 5 + 4) + 3 * 4) + 2 * 3
    8 + (5 * 5 + (2 + 4) + 3 + (5 + 9 + 4) * 6) + ((5 * 7 + 4 + 8 * 2) + 3 * 4) + 5 * (7 * (7 + 2) * (5 + 5) + 5 * (6 * 4 + 8) * (3 * 6 + 5 * 2 * 2 * 3)) + 6
    4 * (7 * 2 * 2 + 7 + 3 + (7 * 4 + 4 + 4)) + 4 + 8 * 5 * 4
    6 + 3 * 7 * ((5 + 9 + 3 * 2 + 5) + (8 * 8 * 4 * 4 * 7 * 2))
    8 + 5 * 8 * 4 * (6 * 5 + 3 * (6 * 3 * 7) * 6)
    ((7 * 5) * (3 * 3 * 5 * 8 + 8) + 4 * (6 * 8 * 6) * 9) + 8 * 7 + 9 * 6
    (2 * 5 * 3 * 3 + 6) + (8 * 4 + (2 + 3 * 8) * 6) + 2 + 5
    (5 + 2 * 6 * 7 * 3 * 7) + (7 + (3 + 2))
    6 + (8 + 7 + 5 + (2 * 5 + 4 + 5 * 7 * 3) * 7) * 7 * 5
    4 + 4 + 4 * 6 * 2 * 5
    4 + (3 * (3 * 2 * 5 * 8 * 3)) + 5 * 9
    8 + 6 + (2 + 2 * 7 + 3)
    5 * 6 * 5 + 5
    (7 * 2 * 8 * 6 + 7) * 9 + 9
    5 + 3 + (5 * (7 * 5)) * (7 + 2 * 3 + (3 * 6 + 3) * 3) + 6 + 4
    (5 + (9 + 5 + 7 + 3 + 9 * 8) + 4 + 5 * 9) * 4 * 5
    4 + ((9 * 6 + 8) * 6 * (8 + 9 + 3) * 8) * 9
    2 + (9 + (9 * 9 + 3 * 3)) + 3 + 6
    4 * ((8 + 6 * 5 + 5) * 3 + 2 + 2) * ((9 * 9) * 5)
    8 * ((2 + 6 * 3) * (8 * 2) + 8 + 8) + 8 + (5 + 5 + 2)
    8 * (4 * (5 + 9 + 3 + 3 * 2) + 7 + 5 * 5)
    9 + 4 + 4 * 7 * (2 + 4)
    6 + 4 * (8 + 4 + (5 + 7 + 6 + 4 * 7)) * 6 * (8 * (7 + 7 + 6 * 2) + 4 * 4 + 3) * (4 + (8 + 5 + 6) * 9 * 8 * 4)
    7 * (2 * 4 * (7 + 5 + 8 + 2) * 8) * 2
    ((7 + 4 * 8) * 9) + (6 * (7 * 6) + 9 * 9) * 7 + 2 * 8 + 2
    (8 * 4 * 6 + (7 * 3 + 2 * 7) + (6 + 2 + 7 * 9 * 6 + 2)) + 9 * 6 + (2 * 5 + (7 * 2) * 8 * 2) + 9 + 9
    (3 + (7 * 3 + 3 * 5 + 6 * 6)) * 3
    8 + 2 * 7 * 3 * (3 * 5 + 4 + 8)
    (9 * (9 * 2 + 7 + 6 * 6)) * 2 * 2 + 9 + ((9 + 7 * 7 + 4 + 6) * 5 + 9 + 3 * 8 + 6)
    5 * 7 + 5 * (3 + 3 * 3 * 6 * 4 * 2) * (3 * 3 + 2 + 4 * 7 + 3) + 9
    7 + (3 + 7 + 4 * 3 * 3 * (4 + 9 + 4)) + 3
    6 * 8 * 7 * ((2 * 7 * 2 + 7 + 7 * 2) * (4 * 9 + 3 * 7 * 7)) * 9 * 3
    5 * 5 + 8 * 5
    (4 + 6 * 9 * 4 + 9) * 5 * 3 + 2 * 7 + (6 * 9)
    (2 + 9 + 3 * 7) * 8
    4 * ((3 * 8 + 3 + 9 * 9) * 9 * 3 * 6 * 7 * 3) + (8 + 7)
    2 * (2 + 4 + 9 * 4 + 9) * 6 + 5
    5 + 9 + 7 + (2 + (2 * 5 * 6 + 5 * 2)) + (9 * 3 * 7)
    5 + 4 * (7 + 7) + (2 * 5)
    5 * 5 + 3 * (7 + 5 * (8 + 8 + 2 * 4 * 9 * 6) + 6)
    4 + (7 * (6 * 5) * 9 * 4 + (6 + 6 * 7 + 2)) + 9 * 2
    (6 * 7 + (8 * 7 + 2 * 2 * 8 * 9) + 8 + 8) + 6 * 8 * (9 + 6 + (4 + 4 + 6 * 2) * 9 * 8 + 4)
    (4 + 9 * 3) * 3
    5 + ((3 * 9 + 2 + 7 * 4) + (8 * 7) * 6) * 2 * (2 + 8 * 7 * 8) + 3
    7 * 4
    (4 * 6 * (3 * 3 + 2) * 3 + 2) + 2
    4 * 6 + (3 * 7 * 4 * 4) + 3 * 8 + 2
    2 + 6 + ((4 + 7 * 6) * (5 + 4 + 7 + 8 + 8) + 4) + 2 * (4 + 3 + 6 + 7 + (9 * 4 * 7 * 3 + 3) + 3)
    9 * 7 * (8 * 6 * 2 * 7) + (3 * 5) + 6 + 3
    7 * 4 * 3 + 2 + (7 + 5 + 5 * (5 + 6 * 2 * 6) + (2 + 8) * 9) + 2
    (6 * 7 * 8) + (7 + 9 * 6 * 2 * 9 * 2) * (3 * 5 * 6 + 9 * 4) * 5 + 4
    ((6 + 9 * 8 + 3) + 5 + 4) + (3 * 5 + (2 * 9)) * 8 + 8 + 5
    (7 + 5 + 7) * 6 * (6 + 6) * (3 + 9 + 8 * (6 + 3 * 7 * 9) + 2) * ((8 + 7 + 7) * 8 + 6) + 3
    3 * 5 * 8 * 9
    (7 + 2 * 7 + 9 * (6 * 6 * 2 + 9 * 3 + 3)) * 3 * (4 + 8 + 2 + 7 + 9 * 7) + (7 + 5 * 4 * 3 + 8) * 7
    8 + 3 + 7 + 3 * (7 * 5 * 4 * 3 + 7 * (9 * 5 + 4))
    5 + 4 + 9 + 8 + 4 * ((5 * 8 + 5 + 4) * 5)
    (2 + 4 + 3) * 2 * (8 * (3 * 7 * 5 + 7 + 3) + 7 * (7 * 2 * 7 * 2 + 8 + 9))
    6 * (3 * 7 * 5 * 5)
    2 * (5 + 6 * 3 * 7 + 4) + 8 + 7 + (4 + 5 * (3 * 8 + 4 + 5)) * 8
    9 + (8 + (9 * 6 * 5 + 8 + 3 + 8) + 2) + (2 + (3 + 8 + 7 * 4 * 9 * 5) + (8 + 7 * 8 + 3) * 8 * 7 + 5) * (2 + (9 * 2 + 5 + 5 + 6 + 9)) + 7
    6 * (7 * 8 + 6) * 3 + ((7 * 8 + 3 * 9) * 5 + 5 + (5 + 5 * 3 * 5 * 4 * 6) * 9)
    7 + (8 * 7 + (9 + 4 * 4 * 8 * 4)) * (3 + 5 + (3 * 4 * 3) + 3 + 7 * 8)
    7 + (4 + 9 * 5) * 9 * 9 * 4
    6 * (7 + 5 + (9 + 7 * 9 + 5))
    2 * 9
    7 * (4 + (9 + 6 * 4 * 7 * 6 + 3) * 3 * 2) + 6 * 2 + 6
    (3 + 2 * 6) * 6 * (7 * 7 + 7 * 4 * 7) + 3 * 6 + 7
    2 + 9 + 7 + 4 + (5 + 5 + 2 * (8 * 9 * 3 + 9 + 8) * 2)
    ((5 + 6 * 5 + 5 + 7 + 2) * (8 * 5 * 3 * 3 * 6) * 9 * 8) * 3 * 8 * (9 * 5 * 8 * 4 + 6)
    (8 * (9 + 2 + 2 * 6) * (9 * 9 + 4 + 8) + 7 * 9 + 6) + 7 + 2 + 6 * 7 + 5
    2 + 5 * ((2 + 9 + 6 * 7 * 6 + 8) * 9 * 8 + 9 + 9 * 8) * 4
    8 + ((3 * 2) + (4 * 3 + 4 + 7 * 4 * 9)) + 5 * 4 + 3 * 9
    5 * 8 + ((9 + 5) + 5 + 8) * 5 + ((3 + 2) + 8 * 3) + 5
    4 + 3 + ((9 * 4 * 7 * 2 + 9) + 7 * (6 + 6 + 4 * 7) * 2 * 6) * 9 * 3
    7 * 6 + 3 * (6 * (3 * 4 + 7 + 7) * 2 * (3 * 7 * 2) + (7 + 3 + 5 + 6 * 4)) + 8
    3 + ((7 * 7 + 7 + 9) * 5 * 3 + 6 * 9) * 2 + (6 * 6 + 2 * 7)
    3 * ((3 + 9 + 5 + 5 * 5) * 3 + 3) * 7 + 3 + 3 + 5
    8 + (4 + 7 + (7 * 2 + 3 + 6 * 6 + 7))
    2 * (8 + 2 * 4 * 6 * 3) + 4
    8 * (8 * 8 + (9 + 5))
    (5 * 3 + 6 * 5 * 7 + 4) * 4 + 9
    9 + ((5 * 4 + 9 * 6 + 5) * 4 + 7 + 2) * (4 + 5 * 8 * 6 + 3) + 7
    (4 * 9 + 4 + 6 * 4 + 7) + 8 + 8 + 2
    7 + (8 * 6 + 4 + 5 + 9) * 7 + 6 * 3 * 4
    (3 + 5) + 3 * 5 + 3
    8 + 2 * 4 + 7 * (8 + 8 * 9)
    7 * (2 * (6 + 9) * 8 + (5 * 5 + 8 + 6 + 6) + 6) * 4 * 4
    (3 + 6 * 8 + 5 * 2 * 9) + 3
    ((9 * 7 + 9 + 3 * 7) * 3 + 6 * 6) * (5 + 5 * 3 + (7 + 8 * 3 + 7 + 4 * 7)) + 7 + 8 + (4 + (2 * 6 * 2 * 6) * 8)
    6 * ((3 + 7 * 6 + 7 * 5) * 6 * 3 * 7 + 6 * 2) + 8 * 7
    7 + 3 + (8 + 9 * 8 + 9 + 3 * (6 * 7)) + 4 * (6 * 7 + 7 * (6 + 9) + 6 + 2)
    5 * 3 * (2 * 6) * (9 + (2 * 2) + 6)
    4 * 8 * 4 + 7 + 7
    3 + 8 * ((5 * 4 * 7 * 9) * 9 + (6 * 6 * 5 + 7)) * 9 * 4 * (4 + 6 * (4 * 7 + 6 + 2))
    (9 * 3 + 2 + 3 + 2 * 8) * 2 + 5 + 2 * 9
    3 + 7 + 7 + (9 * 7 * 3 * 8) + 3
    2 + 3 + (8 * 4) * 7 * 4
    (9 + 8) + 8 * 8 + 6 + 3
    (9 + 5) * (2 * 5 + 3 * 7)
    9 + (8 + 3 * 4) * 5 * ((7 * 6 * 4 * 6) * 2 * 4 + 3 * 5)
    (7 + 5 * 6 * 7 + 4 + 2) + 8 * (8 * 3) + (6 * (9 * 3 * 7 + 7)) * 7
    7 * 2 + (7 + (2 * 6 + 9 + 9 + 5 + 2) + (4 * 5 + 4 + 3 * 7) + 8) * 8
    (6 * 4 + 6 + (5 + 6 * 4) * 2 + 5) * (3 + 2) + (8 + (8 * 7 * 9 + 5) * 5 * 6) + 8 + 5 + 7
    5 + 4 * 4 + 3 + 8 * (2 * 4 + 5 * 3)
    4 * 3 + 6 + 6 * (4 + 9 * (4 * 9)) * 6
    7 + ((3 + 5 + 8) + 9 + 8 + 6 * 9 + (9 + 5 + 7))
    (6 + 7 + 7) * 9 + 6 + 7
    8 + (2 + 6 * (4 * 8 * 3 * 2 + 9 + 8) * 8 + (9 + 5)) * 5
    6 + 5 * 5 * (6 + 9 + 3) * (5 + 9 + 6)
    ((8 * 8 + 5) * 6) * 7
    8 + (4 + 6) + (4 + 6) + (8 * 4 * (6 + 6) * 8 * 6) * 6 + 2
    9 * (6 + 7)
    (6 + 3 + 6 * 8 + (4 + 8 + 3)) * 4
    6 + (6 + 4 + 7 * 9 + 4 * 6) * 3 * 3 * 8 * 6
    7 * (6 + 5) * 7 + 7 + ((3 * 3) + (9 * 8 + 6) + 4)
    6 + (3 + 2) * (5 * (2 * 7 * 6) * 2 * (2 * 8 + 7)) + 7 + (5 + (5 + 8 * 4 + 8) * 2 + 3 + 9 * 7)
    9 + 8 + 6 + (6 + 8 + (9 + 9 + 9 * 6 * 7 * 7)) * 7 * 5
    9 + 5 * (2 + 6) * (8 * 2 * 8)
    (3 * 3 + 2 + 6 + 5) + 4 * 3 * (9 + 9) * 7
    (6 * 8 + 9 + 2 + 7) + 5 * (9 + 4 * 9 * 9 + 8 * 2)
    4 + (5 * 4) * 5 * 5 + 4
    8 * ((2 + 2 * 2 + 8 + 6) * 7 + 5 * 6 * 8 + (7 * 6 + 7 + 4 * 8 + 4)) + 8 + 5
    8 + (2 + 8 * 3) * (5 + (3 * 6) * 3 * 3 * 7) + (7 * 4 + 7 + 9 * (7 * 6)) + 2 + 5
    ((7 * 7 * 4 * 4) + 5 + (2 + 5 * 3 * 7 + 6) + 4 + 5 + (5 * 4 + 5 * 4 + 6)) + 3 + 8 + 2 * 5
    2 * (2 + (8 * 3 * 9 * 6) * 7 + 9) + 8 * 3
    ((6 + 6 + 5 + 6 * 5) + (6 + 7) + 2) * 6 * 4 + 6 + 2
    3 + 9 + 6 + (3 * 7) + 8 * 2
    5 * (8 + 4) + (7 + 3 + 8) + 9 + 3 * ((8 * 7 * 4) * 4 * 5 + 8 * 7 * 2)
    2 * 9 + ((7 + 9) + 7 + (2 + 3) * 2 + 2 + 7) * (7 * 8 * 4 * 8) * 7
    (6 * (5 * 4) + 6 + 3 + 9) + ((4 + 9 * 5 + 3 + 7) + 5) + (6 * 2 * 9 + 2 + (6 + 2 + 2 + 2) + 7) + 7 * (7 * 4) + 2
    ((7 + 4 * 7 * 8) * 9 + 6) + ((9 + 7 + 6 + 2 * 9) * (4 * 9 * 6 * 3 + 8) * 6 + (9 * 6 * 5) + 7 * (6 * 7 * 8 * 5 * 7))
    8 + (8 * (9 + 9 * 6 * 9 * 3) * 2) + 2 * 4
    6 + (6 * 5 * 8 + 4 + (6 * 8 + 5)) + ((7 * 9 * 5 * 7) + 6) * 6 * 3 + 4
    9 * 4 * 4 + (8 + 2 + 2)
    (9 * 6) * 8
    8 + 5 + 9 * 3 + 4
    ((8 + 5 + 7 * 5) + 5 * (2 * 5 + 2 + 5) * 3 * 4) + 9 + 8
    (5 * 6 * 5 * 6 + 9) * 8 * 8 + 2 * 8
    4 * (2 + 6 + 4) + 6
    (9 + 9) * (2 + 2 * (8 + 3) + 9 * 6) + 4 * 4
    2 * (8 * (9 * 9 * 2 * 5) * (3 + 8 * 2 * 8) + 2 * 9) * 3
    (8 * 3 + (3 * 5 + 8 + 4) * 3) * 2 + 9 + 5
    3 * (5 * 4 * 4) + 2 + 8
    (8 + (7 * 4 * 9 * 6 * 2 * 7) + 6 * 7 * 2) * 7
    (7 * 4) + 3 * 7 * 7 * 7 + 3
    (3 + 3) * 5 + 7 * (2 * 8 * 6 * 9 * 9 + 8) * 6
    9 * 6 * (5 + (3 + 8 * 5) + (2 * 2)) + 6 * ((8 * 2 * 4 + 7) + 7)
    (8 + (8 + 2 + 3 + 9) + (8 + 8 * 9 + 4 * 8) * 9) * (3 + 3 + 9 * 6 + 4 * 2) + 4 * (6 + 7 + 9 * 3)
    7 * 6 * 6 * (7 * (4 * 4 * 8) + 9 + 8 + 4 + 7)
    (8 + 9 + 9) * 2 + 4
    (9 * 7 + 3 * 9 * 8 * 3) + 8 + 5 * 8 * 8 * 9
    8 + (6 * 2 * 8 + 9 * 2)
    7 * ((3 + 3 + 6 * 8) + (9 * 5 * 9 + 3) + 6 * (4 + 6 * 3 + 4 + 3 + 8) * (2 + 2 * 9 + 4) + 8)
    2 * 5 * 8 * 5 + 8 * (9 + 6 + (3 + 5 * 2) + (4 + 4 * 6 * 9 + 5))
    3 + ((3 + 5 + 4) + 9 + 9 + 4)
    ((2 * 4) * 2 * 9 + 9) * 9
    (7 + 3) * 2 * (6 + 9 * 4 * 6) * 5 * 3
    6 * ((3 * 6) + 5 + (2 * 8) * 8 + 3 * 6)
    4 * 4 * (7 * 9 + 4 + 9 * 6 + 7) * 9
    ((8 + 6 * 3 + 5) * 3 + 3 * 8 + (4 * 8 * 3 + 4 * 8)) * 8
    8 * (5 * 3 * 3 + 3 * 4) * (7 * 5 * 4) * 3 + 9
    (8 + 7 + 3 * 2 + 9 * (8 * 9 * 9 * 6 + 7)) + 2
    9 * (2 + 3 + 2 * 6 * (6 * 6 + 8) * 2) + 3 + 7 * 7 * 9
    (2 * 8 * 3 * 9 + 7) * 5
    4 + 5 + 9 + 5 + 5 + 9
    2 + (3 + 4) + 4 + 8 + 3 + (4 * (7 + 3 + 7 + 9 * 3))
    2 * (8 + 2) + 6 * 7 * 2 * (7 + 7 + 5)
    5 * 2 + (8 * 8 * 2 + 8 * 6 + 5) * 3 * 5
    6 + 9 + (6 * 6)
    7 + 6
    7 * (3 * 7 * 7 + (7 * 8 + 8 * 7 * 7) * 7) * 3
    3 * 8 + 5 + ((6 + 9 + 2 + 8 * 9 + 3) + (5 * 8) * 2 * 6 + 8 * (7 + 7 + 2 + 6 + 7)) + (3 * 7)
    (2 + 2 + (7 + 8 + 3 * 7 * 2) + 7 * 6 + (5 * 8 + 8)) + 9 + (9 + 7 + 6 + (3 + 8 + 7 + 5 + 9 * 5))
    ((9 * 6 * 9 * 5 + 3) + 8 * 5 + 7 * 9 * (3 * 4 * 7)) * 4 + 7 + 8 * 9 * (7 * 6 * 3)
    (3 * 9) * ((4 + 6) * 8 + 2 * (2 + 2 * 4) + (8 + 2 + 7 * 7 * 2 + 8))
    ((9 + 5 * 5 * 2) + 8 + 5 + 8 + (6 * 5 + 9 + 5)) * 7 * 6 + 4 + ((4 * 7 * 3 + 9 * 5 * 2) * 3 * 7 + 4 + 9 + 9)
    4 + 4 * 5 * (9 * 9 + (9 + 8 * 5 * 8 + 5) + 6) * 7
    6 * 8 * 4
    3 + 8 * ((6 + 5 + 8) * 9) * 9 * (6 + 8 * 9 + 7 + 8) * (5 * (6 * 2 + 9 + 6 * 6 * 7) * 6 * 2)
    9 + 4 + 6 + (2 * 9 * 8 + (7 + 3 + 6 + 3)) + 5
    5 + (8 * (2 * 6 * 9) + 8 * (4 * 6) + (7 + 2 * 3 + 2 * 6 * 4) * 3) + 9 + 3 * 2 + 3
    6 * 7 + 3 * (8 * 9 + 7 + 4 + 4 + (4 + 8 * 7 + 4 * 4)) + (2 + (3 + 9 * 2) * 6)
    4 * 2 * (3 + 4) * 7 + ((9 + 9 * 3) + 4 * 6 + 8 + 8)
    4 + 2 + ((7 * 7 + 5 * 2 * 3) * 9 * 5 * (9 + 5 * 5 * 8 * 6 + 3)) * (6 * 4 * 9 + 3) + 3 * 7
    5 + (7 * 5 * 4 + 3) * 9 + (7 * 6 * 9 + 6 + 6 * (5 * 4 * 7 * 5 * 2 + 3)) + 5
    (4 * 9) + 9 + 4
    ((2 + 4 + 5 * 4 * 3 * 5) + 6 * 2 + 7 + 7 + (4 * 9 + 2 * 7 * 7 + 2)) * 4 + 8 * 7
    6 * 6 + 4 * (2 * 8 * 9 * 2 + (9 * 2 + 5 + 2 * 9 * 6)) * (2 + 9 + 8 * 6 + (5 * 8 * 5) * 5) + 7
    7 * 8 * 8 + (5 * 9 * 3 * 2 * 9 * 6) * 4
    ((2 + 9 + 4 + 7 * 3 * 5) * 7) + 9 * 4 * 8 * 5 * 5
    (8 * 4 * 7 * 6) + 7 * 9 * (7 * (3 * 9 * 4 * 6 + 8)) * 2
    8 * 7 * 3 + (2 + 9 * 5 + 8 * 3 * 4)
    9 + 7 + 8 + 5 * (6 * 3 * 2 + (8 + 3 * 6 + 9) + 6)
    (8 + 2 * (3 * 4 * 2) + 7 * 7) + (6 * 5 * (4 + 8 * 5 + 7 + 8 * 3) * 6 + 8 * 9)
    2 * (4 + 8 + 3 * 2 * 7 * 4)
    9 + 7 * (9 + 8 * 5 + (2 * 5) * (5 * 6 + 3 * 5 * 7 + 3) * 7) * (4 * (3 + 6 * 5 + 8 * 4 * 9) * 8) * 4 + 2
    8 * 5 * 3 + 2 * (7 * 6 + (9 * 6 + 4) * 4 * 5) + 6
    2 * 3 * 6
    6 + (6 + 4 + 4 + 8) * (7 + 6 + 3 + 2) * 2
    7 * (3 * 3 * 5 * 8) * (3 + 8 * 4)
    ((7 + 8 + 9) * 7 + (4 * 3 * 8 * 2 * 5 + 8)) + 7
    8 * (2 * 4 + (5 + 5 * 9 + 9 + 7) + 5 * 5) + 4 * (8 * 2)
    3 + 2 * (5 + 7 * 2) * 5
    3 + 5 + 8 * 6 * 4 + ((6 * 8 * 9 + 4) + 9 * (5 * 9 + 6 * 4) + (2 + 3 + 8 * 7 * 7 * 8))
    (6 * 8 + 4 * 2 * (2 * 8)) * 3
    8 * 5 + 6 * 3 + ((8 * 6 + 6 * 3 * 3) + 3 * 6 + 4) + 4
    (9 * 5 * 7 + 8) + 7 * 9
    3 + 9 + ((5 * 7 + 9 * 5) + 8) + 6
    5 + 4 * 5 + 2 + (8 * 9 * 8 + 5) + (5 * (8 * 6 + 6 * 4 * 2 + 5))
    5 + 7 + 3 + (6 * 9 * 8 + (7 * 6 * 8 + 2 * 4)) * 8 * (5 * (7 + 7 + 4 + 6 * 3 * 6) * 4 + 5 + (6 + 9 + 3 * 7 * 4))
    (2 + 2 + (9 * 5 * 6) * 9 + 5 * 9) * 6 * 5
    7 + ((6 * 4 + 8 + 7 * 9 + 8) * 6 + 8) + 3 * 2 + 3
    4 * 5 + (5 + 9 * (7 * 9) * 4 + 8 + 2) * 3
    4 * 6 * (9 + 4 * 7 + 7) * ((2 + 6) * 6 * 8) + 7 + 8
    9 * 3 * 3 * 6
    5 + (2 * (7 * 9 * 2) + 6) + 7 * 4 + (6 * 4)
    2 + 2 + (3 * 5 + 5 * 9 + (9 * 2 + 9 + 5) + 7)
    8 * (8 + 2 * 2 * 8 * (9 + 5 + 5 + 9 * 4 * 2) * 4) + 2 + (5 + 7 * 6) + 3 * 8
    6 + ((3 + 9) * 6 * (6 + 5 + 6 * 5 + 6))
    (6 + 9 * 6 + (3 * 3 * 6 * 3) + (4 + 2 + 5 * 4 + 9 * 2) + 7) * 7 + 8
    8 * (5 + 4 + 2 * 5 * 4) * 7 + 6 * 7
    (6 * 3 + (9 + 4 * 7 * 2 + 7) * 5 + 3 * 8) + 5 * 7 * 8 + (5 + 5 + 4 + 8 + 3 + 4)
    7 * 9 + (7 + 9) * (9 * 6 + 5) * 5
    9 + (6 * 2 * 9 * 3) * ((7 + 8) * 8 + 3 + 9)
    ((8 * 2 + 2 + 5 * 9) * (4 * 9 + 2 * 8 * 2) + 6 + 4) * 8 + 9
    6 * 9 * (6 * 2 * (7 + 6) + 9 + (9 + 2 + 7 * 2) + 5) + 2
    (5 + 9 + 4 + 8 * 4) * ((8 * 6) * (2 + 9) + 4 * 7 + 9 + (6 * 2 + 5 + 3 * 3))
    ((4 + 6 + 7 * 5 * 3 * 2) * 9 + (8 + 5 + 7 + 9 * 3 * 4)) * 8 + (4 * (7 * 2 * 9 * 6) * 7 * 9 * (6 + 2) + 2) * 3 * 8
    4 + (7 + 7 * 4 + 3 + (8 * 5 + 6 * 4 * 8 + 5) + (5 + 8 + 4 + 3 + 2 * 4))
    2 * (5 * 3 * 7 * 4 + 8 * 9) + 6 + (7 * 3 * 9 + 5 + 2 + 2)
    ((8 * 2) + 5 + 9 + (3 * 8) + 5 * 8) * 2 * 9 * 2
    (9 * 7 + 4 * 9 * 7) + 5 * 3 + 7
    (5 * (5 * 9 + 2) * 5) * 3 * 8 * (3 + 8 + 4 + 7 * 4 * (2 + 2)) * 6 + 8
    7 * (3 + 7 * (3 + 9) + 5 * 3 + 9) + 3 + 5
    3 + 2 + 6 * (9 * 6 + (2 * 7 + 2 + 2 + 3 * 5) * 5) * 3
    9 * ((3 * 8 * 8 + 9) + 4 + 7 * 4)
    9 * (9 * (3 + 6 + 7 * 3) + 4) + 3
    7 + 6 * 6 * 7 * 4
    7 * 9 + 5 + (7 + 7 + 3 * (7 * 9 * 2 * 9 * 8 * 8))
    (6 + 5 * 5 + (6 * 5 + 7 + 5 * 4)) * 8 * (7 + 2 * (2 * 7 + 5) * 6 * 6) * 9 + 5
    (3 + (7 + 9 * 6 + 7 * 7 * 2) + (5 + 5 * 6 + 6 * 6) * (9 * 4 + 9 + 7)) + 8
    3 * (2 * (2 * 4 + 9) * 5 * 7) * 6 * 6 + 2 * 5
    5 * 7 + (8 + 3) + 3
    8 * 7 * 4 + 6 + (6 + 8 * 8) * 4
    3 + ((8 + 2 + 4 + 5 + 5) * 3 + (2 * 9) + 3 + 6) + 6 + 7 + (7 + 3)
    (3 * 4 * 8 + (4 + 5 * 2 * 9)) + 9 * 3 * 3 * (6 * 5 * 6) * 9
    8 + (8 * 6 * 7 * 7 * 8 * 8) + (3 + 2 + 5 * 2) + 7 * 6
    4 + (2 + 9 + 6 + (4 + 6 + 5 + 4 * 7)) + 2 + ((2 * 4 * 5 + 6 + 4) * 5 + 3 + 7)
    2 + (6 * 2 + 4)
    (8 + 3 * 3 + 9) + 3 + 9 + 8
    8 * 9 + 9 * 2 + 2 * (7 * 9 * 5 + 6 * (2 + 8 + 9 + 9 + 5))
    (8 + 7 + (5 + 3 + 2 * 2 + 2 * 7)) * 6 * 9 * 4 * 4
    3 + 7 + 4 * 3 + ((6 + 9 + 2 + 7 * 2) + (5 * 9 * 4 + 5) + 8 * (3 * 2 * 9) + 5 * 6) + 3
    6 + 2 + 3 * (2 + 9 + (6 * 4 * 8) * 2) + 4 + 2
    (7 + 6 + (3 + 6 + 3 * 8 * 5) * 9 * 8) + 7
    4 * (4 + 7 * 4) + (3 * 6) + (4 * 4 + 2 + 6) * 5
    3 * 4 + 7 + 7 * (3 + 5 + 9 + 4 * 9) + ((9 + 5 * 9 * 5 + 9) * (2 * 4) * 7)
    8 * 6 * 9 * (8 + 8 + 3 + 3 + 5) * 2 + 2
    7 * (4 + 8 * 7 * (9 + 2 + 9 * 2 + 5 * 3) + 8)
    6 * 2 + (2 * 8 * (3 + 2 + 6) + (2 * 4 + 7 * 7 * 6 * 8) * 7 * 4) * 6
    5 * 5 * (9 * 3 + 4) * (4 * 3 * 5 + 4 * (2 + 2 + 5 + 7 * 2))
    6 * 7 + 3 + (7 * 4 + 7 + 8 * 7) * (5 + 8 + 7 * 4 + 4) + (8 * 7 * (5 + 4 * 8))
    (6 + (4 * 2 + 4 + 3) * 3 * (2 * 2 + 5 * 4 * 6 * 7)) + 5 + 7 * 4
    2 + ((9 + 2) * 3 * 5 + 2) * 4 + 5 * 3
    ((7 * 2 + 6 + 6) + 2 + (6 + 6 * 5 * 2) + 5) * 5 + 6 * 2
    4 + 9 * (4 * (9 + 4) + 4 + 8 + 7 * 9) + 6 * 4 * 4
    3 + ((3 + 7) + 9 * 4 + 3 * 4 + 2) + 4
    (4 * 9 * 3 * (2 + 3 * 3 + 6 * 7 + 8)) + 5 * 2 + 8 + 4
    2 + (7 + (9 + 7 * 4) * 5 * 9)
    ((5 * 6 * 9 + 4) + 4) * 2 + 2 + 7 * 3 * 3
    4 * ((7 * 9 + 6 + 5 + 5) * 3 * 6 + 6 + 2 * 4) + 2
    (4 * (3 + 6 + 3 * 8) + (8 * 4 * 5 * 8 * 9 * 6) + 5 + (5 * 4 * 6) + 6) + 3 * 3 + (8 + 3) + 8 + 7
    5 + 7 + 2
    7 + 6 * (5 * 6 + (8 + 8 * 9 * 7 + 9 + 7))
    9 * ((2 * 2 + 2) + 5 * (8 + 6 * 7 + 7 + 9) + 2 * 5)
    (6 * (2 * 8 * 9)) + (8 * (9 * 5 + 5) + 9) * (6 + 7) * 7
    9 * (9 + 3 * 9 * 9 * 5 * 4) * 9 + 3 * (9 + 8 * 2)
    4 + 4 + (7 + 7 * 8 + 9 + (8 * 6) + 3) + 2 + 7
    7 + (7 + 7 * 4 + 5 + (5 + 5 + 9 + 6 * 5)) * 8 + (7 * 4 * 5 + 6 * 8) + 3
    7 * 4 * 3 + 6 + 4 + 5
    ((7 + 6 * 7 + 3) * (8 + 2 * 6 + 7 * 8) * 7 + (3 + 6 * 6 * 4)) + ((8 + 9 * 9 + 8) * (4 * 6 * 8 * 2) + 4 + 9 + 4 * 3) * 8
    9 + 2
    2 * (4 + 4 * 3 + 4 * 7 + 2) * 5 * 7 * 7
    8 * (6 * 6 + (9 * 6 + 6 + 3 + 5) + 5 + 3 + 7)
    (5 * 9 + 5 + (6 + 5 * 8 * 3 + 5 * 9) * (9 * 9 * 6 * 2 * 4 + 7)) * 7 * 5 * (8 * 5 + (3 * 7 + 4) * 5 + (4 + 3))
    (4 + (6 * 5) + 2) + 8 + 2
    4 + (8 * 6 + 7 + 7) + ((5 + 6) + 7 + (7 + 4 * 8 + 5 * 2 + 4)) + (5 + 4 + 7 + (9 + 9 + 5 + 6 + 7) + 4) + ((5 * 6 * 5 * 4) + (6 + 9 * 8 * 3 + 8) * 7 + 6 + (9 + 8)) * ((5 + 3 * 7 * 2) + 8 + 4 * 6)
    9 + 5 + 4
    (8 * 4 * (3 + 5 + 6 + 8 + 3)) * 9 + 3
    6 * 7 * 6 + 4 + (9 * (9 * 9 + 8 + 9 * 6 * 7) * 9 * 6 * 5 * 3) + 8
    4 + (3 * (2 * 6 + 2) * 9 + 2) + 6 + 5
    9 * 9 * (7 + (2 * 5 + 5 * 9 * 2 * 3) * 8 + (3 * 9 + 7 + 5) * 9 * 9) + 2
    4 + (9 * (8 * 3 + 3)) * 4 * 8
    2 + 3 + 9 * ((7 * 5) * 7 * 2 * 6) * 4
    (7 + (7 + 6 + 3 + 7 * 4 + 4) + 8) + 7 + 8 * 9 * 7 * 7
    (8 * 8 * 3 * 2) * (8 + 9 + 8 + 3 + 7) + 7 * 9 * 7 * 3
    ((2 * 2 + 4 + 3) * (9 * 3) * 5 * 5) * 2 * 5
    4 + 8 * 7 * 2 + ((3 * 2 + 4) + (4 * 5 * 4) * (6 + 3))
    9 + (6 + 8 + 6 + 9) * 9 * (8 + 9 + (6 + 5 + 8) * 6 * 2 + 7) + (9 + 8 * 9)
    2 + (8 + 3 * 6 + 4 * 3 * 4) * 4 * (6 * 3 + 8 + 9)
    2 * (6 + 9) * 7 + 9
    ((3 * 9) + 4 + 6 + 4) * 8 + 7 * (5 * 5 + 4 + (6 + 7 + 6 + 3 + 4 * 2) + (5 + 8 * 7 * 6 + 5) * 3) * 3 * 9
    7 + (5 + 8 * 4 * (6 + 6 * 6 * 8) + (3 * 6 * 9 * 9 * 5)) * 2 + 2 + 8 * 6
    3 * 4 + 7 * 7 + 6 * (8 + 6)
    9 * (3 + 3) * 5
    5 + 8 + 8 * 7 + 7 + (5 + (6 * 5 * 8 * 3 + 6 + 3) * 6 + 3 * 9 + 2)
    ((4 + 9) * 4 + 3 + 6 * 4 + (9 * 9 + 4)) * 4 * 7 * 9 + 8
    (3 + (7 + 4 * 9) * 9 + (2 * 7 + 2 * 8 * 3 + 7)) * 5 + ((5 + 7 * 8 * 5 * 4 * 5) * 3 * 3 + 4 * 6 + 2)
    2 * 6 * (8 * 3 + 6 + 3 + (2 + 5) + (2 * 3)) + 6 * 4
    (4 + (2 * 8) + 8 + 9) * ((8 * 6 + 5) * 8 + 6 + 9 * 8 * 8) + 6 * (6 + 8 + 7 * 6 * 3) * 3
    (7 + 2 * 5 * 6 * 9) * 6 + 9 + 3 + 5 + 8
    5 + 2 + (2 + (4 + 2) * (3 * 6 * 2 * 4 * 9 + 7) * 6) * 5 + 4
    9 * 9 + 3 + 2 * (8 + 7) + ((4 + 3 + 2) + 4 * (5 + 4 * 7 * 9) * (5 * 3) * 8 * 4)
    (4 * 7 * 4 + 6) * 3 * 9 * 9 * 2
    (4 + 2 + 6 + (9 + 8 + 5 + 8)) + 2 * 9 * 9
    3 * (6 * (4 + 4 * 8 * 3)) * ((7 + 9 * 2) * 6 * 5)
    3 * 4 + 9
    (4 + 3 + 3 * 6) + 2 + (3 * 7) * 2 * (5 + (2 * 6 + 6) + 7 + 4 * 9) + (3 + (6 + 6))
    8 + 4 + ((8 * 5 + 8 * 2 + 5) + 6 * 2) * 3
    6 + 4 * (5 + 9 + 3 * 8 + (8 * 9 * 4 + 4 + 7) * 8)
    6 + ((6 + 6 + 8 * 9 + 5) + 3 + (3 * 8 + 2 + 9 + 8) + 5 * 6 * 8)
    3 * (9 + (8 * 4 * 2 * 7 + 2) * (8 + 2 + 6 + 3) + 3 + 7) * 3 + 8 * 8
    6 * 2 * 6 * 9 + 5 * 6
    9 * 9 + 5 * 5 + (3 + 8) + 5
    (9 + 6 * 6 + 9) * 3 + (7 + 6 + 4) + 7 + 3
    9 * (3 + 3 + (2 + 9 * 2 + 3) * 8 * 2 + 8) * 9
    ((3 + 7 * 2 * 8 * 6) * 7) + (9 * 8 * (7 * 7 * 9 + 4 + 6 * 4) + 8 + (4 + 5 * 2 * 2 + 7) * 8) * 4 + 4
    (4 + 4 * 8 + 2 * (6 * 4 * 2 + 7) + 4) + 6 * 5 + 7
    ((9 * 2 + 7 + 8) + 3 * 7 + 2) + 3
    5 * (6 + 9 + 9 + 6 + 8 * 2) * (6 * (2 * 9 + 6 + 3) + 8 * 3 * 6)
    6 * 6
    2 + 9 + 2 * ((9 + 3 + 5 + 6 * 8) + 8 + 7 * 6 * 9) + 9
    9 + 4 * 9 * (7 + 7 + 8) + 6
    8 * 6 + (3 + 2 + 3 * 4) + 5 * 8
    3 + 4 * 6 * 9 + 4 * 5
    5 * 6 + 7 * ((8 + 5) + 4 * (6 * 7 * 5) * 7 * (3 + 9 * 4))
    9 + 2 * 5 + 7 * 4
    5 + 7 * (6 + 4 + 2) * ((3 + 2) + 7 + (7 * 7 * 3 + 7) + 7 + (9 + 9 + 9) * 8)
    8 + 9 * 7 + (2 + 8 + (8 * 4 + 6)) * 4
    3 * (5 + 7 + (5 + 7 * 6 + 8 * 4 * 7) + (6 + 4 + 5)) * 7 + 4 * (9 * 2 + (5 * 3 + 7) * 2 * 6 * 4) + (6 + 9 * 6 + 2)
    (2 * 8 * 7) + 9 + 2 * 3 + 8
    ((2 + 2 + 8 + 5 * 3) * 2 + 4 * 6 * 2 * 8) * (5 * 6 + (4 + 4) * 5 * 7 + 4) + (6 + (2 * 2 * 5 + 6 + 9) * 5 + 5 * (8 * 7 * 5 + 2 * 7))
    ((7 * 9 + 8 * 2 * 7) * 5) * 2 * 8 * 2 + ((9 + 8) + 7) * 7
    3 + 3 * ((4 + 8) + (3 * 3 + 4 + 9 + 6 * 9) * 2 * 5 * 5 + 4) * 4
    2 * 4 * 9 * 5 + (3 + 5) * (4 * (5 + 4 * 9 + 9 + 4 * 8) * 2 * (2 * 2 + 3 + 2 + 6) + (4 * 8) * 6)
    5 + (9 + (6 + 6 * 4 * 3 * 6 * 2) + 2) * 5 * 8
    7 * 7 + 7 * (4 + 5 * 9 * (9 * 2 * 4))
    ((4 * 3 * 6) * 5 * 4) * 6 + 3 + 2 * 6";
  return input.split("\n")
    .map(|line| parse_expression(line))
    .collect();
}

#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn parse() {
    let input = "1 + (2 * 3) + (4 * (5 + 6))";
    assert_eq!(vec!["1", "+", "(", "2", "*", "3", ")", "+", "(", "4", "*", "(", "5", "+", "6", ")", ")"], parse_expression(input));
  }

  #[test]
  fn evaluate() {
    assert_eq!(51, evaluate_expression(&parse_expression("1 + (2 * 3) + (4 * (5 + 6))")));
    assert_eq!(12240, evaluate_expression(&parse_expression("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))")));
    assert_eq!(13632, evaluate_expression(&parse_expression("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2")));
  }

  #[test]
  fn evaluate_addition_first_no_parens() {
    assert_eq!(231, evaluate_expression_plus_order(&parse_expression("1 + 2 * 3 + 4 * 5 + 6")));
  }

  #[test]
  fn evaluate_addition_first() {
    assert_eq!(23340, evaluate_expression_plus_order(&parse_expression("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2")));
  }
}